From: Benjamin Drung <benjamin.drung@ionos.com>
Date: Fri, 8 Oct 2021 14:26:43 +0200
Subject: dpkg_lowpkg: Drop reading /var/lib/dpkg/available directly
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

salt contains modules, which directly access the dpkg internal database,
instead of using one of the public interfaces provided by dpkg. This is
a problem for several reasons, because even though the layout and format
of the dpkg database is administrator friendly, and it is expected that
those might need to mess with it, in case of emergency, this “interface”
does not extend to other programs besides the dpkg suite of tools. The
admindir can also be configured differently at dpkg build or run-time.
And finally, the contents and its format, will be changing in the near
future.

`/var/lib/dpkg/available` should not be read directly. Instead
`dpkg-query --print-avail` should be used. The `/var/lib/dpkg/available`
file is only kept up-to-date when using dselect, but nowadays `apt` is
used, and therefore this file does not provide much more information
than `dpkg-query -W`. Users of APT-based frontends should use `apt show`
or in our case the `pkg.show` salt module.

`dpkg-query --print-avail` provides following keys (on Ubuntu 20.04):

```
$ dpkg-query --print-avail | sed 's/:.*$//' | sort | uniq
Architecture
Breaks
Bugs
Build-Essential
Built-Using
Cnf-Extra-Commands
Cnf-Priority-Bonus
Conflicts
Depends
Description
Description-md5
Enhances
Essential
Filename
Homepage
Important
Installed-Size
Maintainer
MD5sum
Multi-Arch
Origin
Original-Maintainer
Package
Pre-Depends
Priority
Provides
Recommends
Replaces
Section
SHA1
SHA256
Size
Source
Suggests
Supported
Task
Version
```

Following keys cannot be retrieved by `dpkg-query -W`:

```
Build-Essential
Built-Using
Cnf-Extra-Commands
Cnf-Priority-Bonus
Important
Multi-Arch
Original-Maintainer
SHA1
SHA256
Supported
```

Please use `pkg.show` for those keys.

Following additional keys could be retrieved if needed:

```
Breaks
Enhances
Essential
Filename
Pre-Depends
Priority
Suggests
```

Without calling `_get_pkg_ds_avail`, `info` just calls `_get_pkg_info`
and converts it into a dict and add a license field. Since
`_get_pkg_ds_avail` is used nowhere else, move it into `info`.

Do not query Installed-Size, because it was stripped as "technical" key
previously.

Bug: https://github.com/saltstack/salt/issues/52605
Bug-Debian: https://bugs.debian.org/944970
Forwarded: https://github.com/saltstack/salt/pull/58735
Signed-off-by: Benjamin Drung <benjamin.drung@ionos.com>
---
 salt/modules/dpkg_lowpkg.py            | 162 +++++++++------------------------
 tests/unit/modules/test_dpkg_lowpkg.py |   1 -
 2 files changed, 44 insertions(+), 119 deletions(-)

diff --git a/salt/modules/dpkg_lowpkg.py b/salt/modules/dpkg_lowpkg.py
index 84b2b26..f7c4ff9 100644
--- a/salt/modules/dpkg_lowpkg.py
+++ b/salt/modules/dpkg_lowpkg.py
@@ -234,15 +234,49 @@ def file_dict(*packages, **kwargs):
     return {"errors": errors, "packages": ret}
 
 
-def _get_pkg_info(*packages, **kwargs):
+def _get_pkg_license(pkg):
     """
-    Return list of package information. If 'packages' parameter is empty,
-    then data about all installed packages will be returned.
+    Try to get a license from the package.
+    Based on https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
 
-    :param packages: Specified packages.
-    :param failhard: Throw an exception if no packages found.
+    :param pkg:
     :return:
     """
+    licenses = set()
+    cpr = "/usr/share/doc/{}/copyright".format(pkg)
+    if os.path.exists(cpr):
+        with salt.utils.files.fopen(cpr) as fp_:
+            for line in salt.utils.stringutils.to_unicode(fp_.read()).split(os.linesep):
+                if line.startswith("License:"):
+                    licenses.add(line.split(":", 1)[1].strip())
+
+    return ", ".join(sorted(licenses))
+
+
+def info(*packages, **kwargs):
+    """
+    Returns a detailed summary of package information for provided package names.
+    If no packages are specified, all packages will be returned.
+
+    .. versionadded:: 2015.8.1
+
+    packages
+        The names of the packages for which to return information.
+
+    failhard
+        Whether to throw an exception if none of the packages are installed.
+        Defaults to True.
+
+        .. versionadded:: 2016.11.3
+
+    CLI Example:
+
+    .. code-block:: bash
+
+        salt '*' lowpkg.info
+        salt '*' lowpkg.info apache2 bash
+        salt '*' lowpkg.info 'php5*' failhard=false
+    """
     kwargs = salt.utils.args.clean_kwargs(**kwargs)
     failhard = kwargs.pop("failhard", True)
     if kwargs:
@@ -253,7 +287,7 @@ def _get_pkg_info(*packages, **kwargs):
     else:
         bin_var = "${Package}"
 
-    ret = []
+    ret = {}
     cmd = (
         "dpkg-query -W -f='package:" + bin_var + "\\n"
         "revision:${binary:Revision}\\n"
@@ -263,7 +297,6 @@ def _get_pkg_info(*packages, **kwargs):
         "source:${source:Package}\\n"
         "version:${Version}\\n"
         "section:${Section}\\n"
-        "installed_size:${Installed-size}\\n"
         "size:${Size}\\n"
         "MD5:${MD5sum}\\n"
         "SHA1:${SHA1}\\n"
@@ -307,118 +340,11 @@ def _get_pkg_info(*packages, **kwargs):
             if value:
                 pkg_data[key] = value
         pkg_data["description"] = pkg_descr.split(":", 1)[-1]
-        ret.append(pkg_data)
-
-    return ret
-
 
-def _get_pkg_license(pkg):
-    """
-    Try to get a license from the package.
-    Based on https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
-
-    :param pkg:
-    :return:
-    """
-    licenses = set()
-    cpr = "/usr/share/doc/{}/copyright".format(pkg)
-    if os.path.exists(cpr):
-        with salt.utils.files.fopen(cpr) as fp_:
-            for line in salt.utils.stringutils.to_unicode(fp_.read()).split(os.linesep):
-                if line.startswith("License:"):
-                    licenses.add(line.split(":", 1)[1].strip())
-
-    return ", ".join(sorted(licenses))
-
-
-def _get_pkg_ds_avail():
-    """
-    Get the package information of the available packages, maintained by dselect.
-    Note, this will be not very useful, if dselect isn't installed.
-
-    :return:
-    """
-    avail = "/var/lib/dpkg/available"
-    if not salt.utils.path.which("dselect") or not os.path.exists(avail):
-        return dict()
-
-    # Do not update with dselect, just read what is.
-    ret = dict()
-    pkg_mrk = "Package:"
-    pkg_name = "package"
-    with salt.utils.files.fopen(avail) as fp_:
-        for pkg_info in salt.utils.stringutils.to_unicode(fp_.read()).split(pkg_mrk):
-            nfo = dict()
-            for line in (pkg_mrk + pkg_info).split(os.linesep):
-                line = line.split(": ", 1)
-                if len(line) != 2:
-                    continue
-                key, value = line
-                if value.strip():
-                    nfo[key.lower()] = value
-            if nfo.get(pkg_name):
-                ret[nfo[pkg_name]] = nfo
-
-    return ret
-
-
-def info(*packages, **kwargs):
-    """
-    Returns a detailed summary of package information for provided package names.
-    If no packages are specified, all packages will be returned.
-
-    .. versionadded:: 2015.8.1
-
-    packages
-        The names of the packages for which to return information.
-
-    failhard
-        Whether to throw an exception if none of the packages are installed.
-        Defaults to True.
-
-        .. versionadded:: 2016.11.3
-
-    CLI Example:
-
-    .. code-block:: bash
-
-        salt '*' lowpkg.info
-        salt '*' lowpkg.info apache2 bash
-        salt '*' lowpkg.info 'php5*' failhard=false
-    """
-    # Get the missing information from the /var/lib/dpkg/available, if it is there.
-    # However, this file is operated by dselect which has to be installed.
-    dselect_pkg_avail = _get_pkg_ds_avail()
-
-    kwargs = salt.utils.args.clean_kwargs(**kwargs)
-    failhard = kwargs.pop("failhard", True)
-    if kwargs:
-        salt.utils.args.invalid_kwargs(kwargs)
-
-    ret = dict()
-    for pkg in _get_pkg_info(*packages, failhard=failhard):
-        # Merge extra information from the dselect, if available
-        for pkg_ext_k, pkg_ext_v in dselect_pkg_avail.get(pkg["package"], {}).items():
-            if pkg_ext_k not in pkg:
-                pkg[pkg_ext_k] = pkg_ext_v
-        # Remove "technical" keys
-        for t_key in [
-            "installed_size",
-            "depends",
-            "recommends",
-            "provides",
-            "replaces",
-            "conflicts",
-            "bugs",
-            "description-md5",
-            "task",
-        ]:
-            if t_key in pkg:
-                del pkg[t_key]
-
-        lic = _get_pkg_license(pkg["package"])
+        lic = _get_pkg_license(pkg_data["package"])
         if lic:
-            pkg["license"] = lic
-        ret[pkg["package"]] = pkg
+            pkg_data["license"] = lic
+
+        ret[pkg_data["package"]] = pkg_data
 
     return ret
diff --git a/tests/unit/modules/test_dpkg_lowpkg.py b/tests/unit/modules/test_dpkg_lowpkg.py
index 29d3335..dd5c0f3 100644
--- a/tests/unit/modules/test_dpkg_lowpkg.py
+++ b/tests/unit/modules/test_dpkg_lowpkg.py
@@ -282,7 +282,6 @@ class DpkgTestCase(TestCase, LoaderModuleMockMixin):
                         "source:bash",
                         "version:4.4.18-2ubuntu1",
                         "section:shells",
-                        "installed_size:1588",
                         "size:",
                         "MD5:",
                         "SHA1:",
